// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Backbone.tinywing = (function(Backbone, _) {
    var Tinywing, debug, log, traversal;
    debug = true;
    log = function() {
      if (debug) {
        return console.log.apply(console, arguments);
      }
    };
    traversal = function(node, process) {
      var done, next, stop;
      stop = false;
      done = function() {
        return stop = true;
      };
      node = node.firstChild;
      while (node) {
        next = node.nextSibling;
        process(node, done);
        if (!stop) {
          traversal(node, process);
        }
        node = next;
      }
    };
    Tinywing = (function(_super) {
      __extends(Tinywing, _super);

      Tinywing.directive = function(name, directive) {
        var _base;
        this.__directives || (this.__directives = {});
        return (_base = this.__directives)[name] || (_base[name] = directive);
      };

      function Tinywing(tpl) {
        this.__updaters = {};
        this.__tpl = tpl;
        this.compile();
      }

      Tinywing.prototype.compile = function() {
        this.__root = document.createElement('div');
        this.__root.innerHTML = this.__tpl;
        traversal(this.__root, (function(_this) {
          return function(node, done) {
            var attr, directive, _i, _len, _ref;
            if (node.nodeType === 3) {
              return _this.bindTextNode(node);
            }
            _ref = node.attributes;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              attr = _ref[_i];
              if (attr.name.indexOf('tw-') === 0) {
                directive = attr.name.slice(3);
                attr = attr.value;
              }
            }
            if (directive && attr) {
              _this.bind(node, directive, attr, done);
            }
          };
        })(this));
      };

      Tinywing.prototype.bind = function(node, directive, attr, done) {
        log("" + directive + "-bind to " + node + " with " + attr);
        directive = Tinywing.__directives[directive];
        if (_.isFunction(directive)) {
          return this._bind(node, attr, directive);
        } else if (_.isObject(directive)) {
          if (directive.terminal) {
            done();
          }
          return this._bind(node, attr, directive.compile);
        }
      };

      Tinywing.prototype._bind = function(node, attr, updater) {
        var attrLink, first, _base;
        first = attr.split('.')[0];
        (_base = this.__updaters)[first] || (_base[first] = []);
        this[first] || (this[first] = function(val, valObj, parent) {
          var up, _i, _len, _ref;
          _ref = this.__updaters[first];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            up = _ref[_i];
            up(node, val, valObj, parent);
          }
        });
        if (attr.indexOf('.') > -1) {
          attrLink = attr.split('.');
          first = attrLink.shift();
          this.__updaters[first].push(function(node, val, valObj, parent) {
            var atr, _i, _len;
            for (_i = 0, _len = attrLink.length; _i < _len; _i++) {
              atr = attrLink[_i];
              val = val[atr];
            }
            updater(node, val, valObj, parent);
          });
        } else {
          this.__updaters[first].push(updater);
        }
      };

      Tinywing.prototype.bindTextNode = function(node) {
        var attr, bind, child, first, last, match, matches, newData, newNode, next, parent, tempObj, _fn, _i, _j, _len, _len1, _ref;
        if (!/{{[^}]*}}/.test(node.data)) {
          return;
        }
        log("text-bind to " + node);
        matches = node.data.match(/{{[^}]*}}/g);
        tempObj = {};
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          match = matches[_i];
          tempObj[match] = match;
        }
        matches = Object.keys(tempObj);
        newData = node.data;
        parent = node.parentNode;
        _fn = (function(_this) {
          return function(attr, parent) {
            return _this._bind(node, attr, function(node, val, valObj, p) {
              var nodes, _k, _len2;
              p || (p = parent);
              nodes = p.childNodes;
              for (_k = 0, _len2 = nodes.length; _k < _len2; _k++) {
                node = nodes[_k];
                if ((node.data != null) && node.data.indexOf("data-bind='_text:" + attr + "'") > -1) {
                  node.nextSibling.data = val;
                  log("text-refrash to " + node + " with " + val);
                }
              }
            });
          };
        })(this);
        for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
          match = matches[_j];
          _ref = /{{([^}]*)}}/.exec(match), bind = _ref[0], attr = _ref[1];
          newData = newData.replace(new RegExp(bind, 'g'), "<!-- data-bind='_text:" + attr + "' -->" + bind + "<!-- -->");
          _fn(attr, parent);
        }
        newNode = document.createElement('div');
        newNode.innerHTML = newData;

        /*
        Replce origin text node
         */
        first = child = newNode.firstChild;
        while (child) {
          next = child.nextSibling;
          if (child === first) {
            parent.replaceChild(child, node);
          } else {
            if (parent.lastChild === last) {
              parent.appendChild(child);
            } else {
              parent.insertBefore(child, last.nextSibling);
            }
          }
          last = child;
          child = next;
        }
      };

      Tinywing.prototype.appendTo = function(el) {
        var child, next;
        child = this.__root.firstChild;
        while (child) {
          next = child.nextSibling;
          el.appendChild(child);
          child = next;
        }
        return this;
      };

      Tinywing.prototype.bindModel = function(model) {
        var attr, data;
        data = model.toJSON();
        this.render(data);
        for (attr in data) {
          if (!__hasProp.call(data, attr)) continue;
          if (attr in this) {
            (function(_this) {
              return (function(attr) {
                return _this.listenTo(model, "change:" + attr, function() {
                  data = model.toJSON();
                  return _this[attr](data[attr], data);
                });
              });
            })(this)(attr);
          }
        }
        return this;
      };

      Tinywing.prototype.unbindModel = function(model) {
        return this.stopListening(model);
      };

      Tinywing.prototype.render = function(model) {
        var key, value;
        for (key in this) {
          if (!__hasProp.call(this, key)) continue;
          value = this[key];
          if (['__root', '__updaters', '__tpl'].indexOf(key) === -1) {
            this[key](model[key], model);
          }
        }
        return this;
      };

      return Tinywing;

    })(Backbone.Events);
    Tinywing.directive('text', function(node, val) {
      node.innerHTML = val + '';
      return log("text-refrash to " + node + " with " + val);
    });
    Tinywing.directive('value', function(node, val) {
      node.value = val;
      return log("value-refrash to " + node + " with " + val);
    });
    Tinywing.directive('if', {
      terminal: true,
      compile: function(node, val, valObj) {
        var child, innerDomTpl, innerHTML, key, next, value;
        innerHTML = node.innerHTML;
        node.innerHTML = '';
        log("if-refrash to " + node + " with " + val);
        if (!val) {
          return;
        }
        innerDomTpl = new Tinywing(innerHTML);

        /*
        Copy children elements
         */
        child = innerDomTpl.__root.firstChild;
        while (child) {
          next = child.nextSibling;
          node.appendChild(child);
          child = next;
        }
        for (key in innerDomTpl) {
          if (!__hasProp.call(innerDomTpl, key)) continue;
          value = innerDomTpl[key];
          if (key !== '__root') {
            if (valObj[key] != null) {
              innerDomTpl[key](valObj[key], valObj, node);
            }
          }
        }
      }
    });
    Tinywing.directive('foreach', {
      terminal: true,
      compile: function(node, val) {
        var child, innerDomTpl, innerHTML, item, key, next, value, _i, _len;
        innerHTML = node.innerHTML;
        node.innerHTML = '';
        log("foreach-refrash to " + node + " with " + val);
        for (_i = 0, _len = val.length; _i < _len; _i++) {
          item = val[_i];
          innerDomTpl = new Tinywing(innerHTML);

          /*
          Copy children elements
           */
          child = innerDomTpl.__root.firstChild;
          while (child) {
            next = child.nextSibling;
            node.appendChild(child);
            child = next;
          }
          for (key in innerDomTpl) {
            if (!__hasProp.call(innerDomTpl, key)) continue;
            value = innerDomTpl[key];
            if (['__root', '__updaters', '__tpl'].indexOf(key) === -1) {
              if (item[key]) {
                innerDomTpl[key](item[key], item, node);
              }
            }
          }
        }
      }
    });
    return function(tpl) {
      return new Tinywing(tpl);
    };
  })(Backbone, _);

}).call(this);
